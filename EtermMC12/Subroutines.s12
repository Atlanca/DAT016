;; B - Byte to output
Outbyte:
	STAB	DCShadow
	STAB	DrillControl
	RTS

;; B - tal som anger vilken bit som ska nollställas
Outzero:
	PSHA
	PSHB
	LDAA	#1
	BITB	#7
	BEQ	ifBZero
	BITB	#%11111000
	BNE	Outzero_return
loop2:
	ASLA
	DECB
	BNE	loop2
ifBZero:	
	COMA
	ANDA	DCShadow
	STAA	DrillControl
	STAA	DCShadow
	
Outzero_return:	
	PULB
	PULA
	RTS	

;; B - tal som anger vilken bit som ska ettställas
Outone:
	PSHA
	PSHB
	LDAA	#1
	BITB	#%11111000
	BNE	returnOutone
	BITB	#7
	BEQ	ifBZero2
loop3:
	ASLA
	DECB
	BNE	loop3
ifBZero2:
	ORAA	DCShadow
	STAA	DrillControl
	STAA	DCShadow
returnOutone: 
	PULB
	PULA
	RTS 
	
; Motor Start
; Waits for engine to speed up for one second
; if not already started
MotorStart:
	PSHB
	LDAB	DCShadow
	BITB	#4		; bit 3 (engine)
	BNE	MotorStart_end	; return
	LDAB	#2		; bit 2 (start drill)
	JSR	Outone
	
	LDAB	#4	; 4 * 250ms
MotorStart_loop:
	JSR	DELAY
	DECB
	CMPB	#0
	BNE	MotorStart_loop
MotorStart_end:
	PULB
	RTS	
	
;Motor Stop
MotorStop:
	PSHB
	LDAB	#2
	JSR	Outzero
	PULB
	RTS
	
DrillDown:
	PSHB
	LDAB	#3
	JSR	Outone
	PULB
	RTS 
DrillUp:
	PSHB
	LDAB 	#3
	JSR	Outzero
	PULB
	RTS
;Subrutin Alarm
Alarm:
	CMPB	#0	
	BEQ	AlarmExit	;Hoppa ur subrutinen om register B är 0
BeepMinusOne:
	PSHB			;Spara B i stacken
	LDAB	#4		
	JSR	Outone		;Sätt på alarm
	LDAA	#4		;4*0.25 = 1 sekund 
oneAlarmDelayLoop:
	JSR	DELAY		
	DECA
	BNE	oneAlarmDelayLoop	;Fortsätt efter att 1 sekund har gått

	JSR	Outzero		;Stäng av alarm
	LDAA	#2		;2*0.25 = 0.5 sekunder
halfAlarmDelayLoop:
	JSR	DELAY
	DECA
	BNE	halfAlarmDelayLoop
	PULB			;Hämta tillbaka värdet som fanns i B innan subrutinen utfördes
	DECB			
	BNE	BeepMinusOne
;	JSR	Outzero
AlarmExit:	
	RTS 
	
; Step one step. Only if drill is on top
; Return B 1 if steped, 0 if it did not step
; A and B may change
Step:	LDAA	DrillStatus
	BITA	#2		; top level
	BEQ	StepFailure
StepStart:
	LDAB	#1		; direction bit
	JSR	Outone
	LDAB	#0		; pulse bit
	JSR	Outzero		; reset pulse
	JSR	Outone		; do pulse
	
	JSR	DELAY
	LDAB	#1		; success indicator
	BRA	StepEnd
StepFailure:	
	LDAB	#2		
	JSR	Alarm		; alarm 2 times
	LDAB	#0		; failure indicator
StepEnd
	RTS

;Subrutin drilldowntest
DrillDownTest:
	LDAB	#20		;20*0.25 = 5
DDT_DelayLoop:
	JSR	DELAY
	LDAA	DrillStatus
	BITA	#4
	BNE	DDT_success
	DECB
	CMPB	#0
	BNE	DDT_DelayLoop
	LDAB	#2
	JSR 	Alarm		;give alarm if drill not at bottom
	LDAB	#0		
	RTS
	
DDT_success:
	LDAB 	#1
	RTS  
	

;Subroutine DrillHole
DrillHole:
	JSR 	DrillDown
	JSR	DrillDownTest
	JSR	DrillUp
	RTS 
	
; Move B=N steps
; Returns B = 1 if success, B = 0 otherwise
; A and B may change
Nstep:	CMPA 	#0
	BEQ	Nstep_Success	; if B=0, iteration done
	DECA
	
	PSHA
	JSR	Step
	PULA
	
	CMPB	#0
	BNE	Nstep		; if B!=0 (not failure), continue loop
Nstep_Failure:
	LDAB 	#0
	RTS
Nstep_Success:
	LDAB 	#1
	RTS

; Move to reference point
; Returns B = 1 if success, B = 0 otherwise
; A and B may change
RefPos:	LDAA	DrillStatus
	BITA	#1		; bit 0, reference point
	BNE	RefPos_Success
	JSR	Step		; result in B
	CMPB	#0
	BNE	RefPos		; B!=0 => continue looping, B=0 => failure
RefPos_Failure:
	LDAB	#0
	RTS
RefPos_Success:
	LDAB	#1
	RTS
	
	
;Subroutine Auto
Auto:
	JSR	RefPos
	BITB	#$FF
	BEQ	Auto_Exit
ContinueDrilling:
	JSR	MotorStart
	
	LDAB	,X
	INCX
	CMPB	#$FF
	BEQ	Auto_Exit
	JSR	NStep
	BITB	#$FF
	BEQ	Auto_Exit
	JSR	DrillHole
	BITB	#$FF
	BNE	ContinueDrilling
Auto_Exit
	JSR	MotorStop
	RTS

